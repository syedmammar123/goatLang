arr = [234,'hello',8888,[3,[4,5,['hello']]], fun printName()
{
        b = 0
}
]


fun print(name,date){
     a = 'Hello world'
     fun hello(dob){
        global const b = 329
        global const v = 329
        c = 999
     }
}


if ((k < j && i === l) && i == u || t < p && w===o){
}
if (2){
    if (6){

    }elf (69){

    }else{

    }
}
elf(0){

}
else{

}
fun print(name){

}
a = 4
b = 3

temp = 0

temp = a + 1
a = b
b = a
temp = 0

temp = a === b > c === b

temp2 = 3









discarded code

//        if (
//            tokens[i].type === 'Number' &&
//            scope[scope.length - 1] instanceof ArrayExpression // numbers ko current scope k array me add krengy
//        ) {
//            let temp = new NumericLiteral(tokens[i].value)
//            scope[scope.length - 1].push(temp)
//            i++
//        }
//        if (
//            tokens[i].type === 'string' &&
//            scope[scope.length - 1] instanceof ArrayExpression // same for strings
//        ) {
//            let temp = new StringLiteral(tokens[i].value)
//            scope[scope.length - 1].push(temp)
//            i++
//        }


//                const assignmentExp = new AssignmentExpression()
//                assignmentExp.setLeft(getNode(tokens[i]))
//                returnStat.setArgument(assignmentExp)
//                i++
//                i++
//                let expTokens = []
//                while (true) {
//                    if (
//                        ((expTokens[expTokens.length - 1]?.type === 'identifier' ||
//                            expTokens[expTokens.length - 1]?.type === 'string' ||
//                            expTokens[expTokens.length - 1]?.type === 'Number') &&
//                            (tokens[i]?.type === 'identifier' ||
//                                tokens[i]?.type === 'string' ||
//                                tokens[i]?.type === 'Number' ||
//                                keywords?.includes(tokens[i]?.value))) ||
//                        tokens.length <= i ||
//                        tokens[i].value === '}'
//                    ) {
//                        break
//                    }
//                    expTokens.push(tokens[i])
//                    i++
//                }
//
//                if (expTokens.length === 1) {
//                    assignmentExp.setRight(getNode(expTokens[0]))
//                } else {
//                    assignmentExp.setRight(parseLogicalExpression(expTokens))
//                }



fun print(name){
const a = 'hello world'
b = 0
b = 10 + 3

return a.length === b.length
}
c = 0
c = arr.length.max.get.got.git === 'lol'.length.sum

